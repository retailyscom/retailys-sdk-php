<?php
/**
 * PriceModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Retailys API
 *
 * Communication API restful e-commerce system Retailys. Get access in system at [https://www.retailys.com](https://www.retailys.com)<h1>Introduction</h1>**Retailys API** allows to create an amazing ecosystem of e-commerce services and help to develop robust webshops and other e-commerce solutions. Thanks to many built-in omnichannel and multichannel principles, every developer has possibility tu use **Retailys API** for creating vast global e-commerce applications easily and effectively.
 *
 * The version of the OpenAPI document: 1.1.02
 * Contact: helpdesk@retailys.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Retailys\Model;

use \ArrayAccess;
use \Retailys\ObjectSerializer;

/**
 * PriceModel Class Doc Comment
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class PriceModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PriceModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'basePrice' => 'float',
        'basePriceWord' => 'string',
        'finalPrice' => 'float',
        'finalPriceWord' => 'string',
        'vat' => 'float',
        'vatValue' => 'float',
        'vatValueWord' => 'string',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'basePrice' => 'float',
        'basePriceWord' => null,
        'finalPrice' => 'float',
        'finalPriceWord' => null,
        'vat' => 'float',
        'vatValue' => 'float',
        'vatValueWord' => null,
        'currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'basePrice' => 'base_price',
        'basePriceWord' => 'base_price_word',
        'finalPrice' => 'final_price',
        'finalPriceWord' => 'final_price_word',
        'vat' => 'vat',
        'vatValue' => 'vat_value',
        'vatValueWord' => 'vat_value_word',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'basePrice' => 'setBasePrice',
        'basePriceWord' => 'setBasePriceWord',
        'finalPrice' => 'setFinalPrice',
        'finalPriceWord' => 'setFinalPriceWord',
        'vat' => 'setVat',
        'vatValue' => 'setVatValue',
        'vatValueWord' => 'setVatValueWord',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'basePrice' => 'getBasePrice',
        'basePriceWord' => 'getBasePriceWord',
        'finalPrice' => 'getFinalPrice',
        'finalPriceWord' => 'getFinalPriceWord',
        'vat' => 'getVat',
        'vatValue' => 'getVatValue',
        'vatValueWord' => 'getVatValueWord',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['basePrice'] = $data['basePrice'] ?? null;
        $this->container['basePriceWord'] = $data['basePriceWord'] ?? null;
        $this->container['finalPrice'] = $data['finalPrice'] ?? null;
        $this->container['finalPriceWord'] = $data['finalPriceWord'] ?? null;
        $this->container['vat'] = $data['vat'] ?? null;
        $this->container['vatValue'] = $data['vatValue'] ?? null;
        $this->container['vatValueWord'] = $data['vatValueWord'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets basePrice
     *
     * @return float|null
     */
    public function getBasePrice()
    {
        return $this->container['basePrice'];
    }

    /**
     * Sets basePrice
     *
     * @param float|null $basePrice Base price of article on channel.
     *
     * @return self
     */
    public function setBasePrice($basePrice)
    {
        $this->container['basePrice'] = $basePrice;

        return $this;
    }

    /**
     * Gets basePriceWord
     *
     * @return string|null
     */
    public function getBasePriceWord()
    {
        return $this->container['basePriceWord'];
    }

    /**
     * Sets basePriceWord
     *
     * @param string|null $basePriceWord Base price word of article on channel.
     *
     * @return self
     */
    public function setBasePriceWord($basePriceWord)
    {
        $this->container['basePriceWord'] = $basePriceWord;

        return $this;
    }

    /**
     * Gets finalPrice
     *
     * @return float|null
     */
    public function getFinalPrice()
    {
        return $this->container['finalPrice'];
    }

    /**
     * Sets finalPrice
     *
     * @param float|null $finalPrice Final price of article on channel.
     *
     * @return self
     */
    public function setFinalPrice($finalPrice)
    {
        $this->container['finalPrice'] = $finalPrice;

        return $this;
    }

    /**
     * Gets finalPriceWord
     *
     * @return string|null
     */
    public function getFinalPriceWord()
    {
        return $this->container['finalPriceWord'];
    }

    /**
     * Sets finalPriceWord
     *
     * @param string|null $finalPriceWord Final price word of article on channel.
     *
     * @return self
     */
    public function setFinalPriceWord($finalPriceWord)
    {
        $this->container['finalPriceWord'] = $finalPriceWord;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float|null $vat Vat of article on channel.
     *
     * @return self
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets vatValue
     *
     * @return float|null
     */
    public function getVatValue()
    {
        return $this->container['vatValue'];
    }

    /**
     * Sets vatValue
     *
     * @param float|null $vatValue Vat value of article on channel.
     *
     * @return self
     */
    public function setVatValue($vatValue)
    {
        $this->container['vatValue'] = $vatValue;

        return $this;
    }

    /**
     * Gets vatValueWord
     *
     * @return string|null
     */
    public function getVatValueWord()
    {
        return $this->container['vatValueWord'];
    }

    /**
     * Sets vatValueWord
     *
     * @param string|null $vatValueWord Vat value word of article on channel.
     *
     * @return self
     */
    public function setVatValueWord($vatValueWord)
    {
        $this->container['vatValueWord'] = $vatValueWord;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency of article on channel.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


