<?php
/**
 * CompanyModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Retailys API
 *
 * Communication API restful e-commerce system Retailys. Get access in system at [https://www.retailys.com](https://www.retailys.com)<h1>Introduction</h1>**Retailys API** allows to create an amazing ecosystem of e-commerce services and help to develop robust webshops and other e-commerce solutions. Thanks to many built-in omnichannel and multichannel principles, every developer has possibility tu use **Retailys API** for creating vast global e-commerce applications easily and effectively.
 *
 * The version of the OpenAPI document: 1.1.02
 * Contact: helpdesk@retailys.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Retailys\Model;

use \ArrayAccess;
use \Retailys\ObjectSerializer;

/**
 * CompanyModel Class Doc Comment
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CompanyModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'street' => 'string',
        'city' => 'string',
        'zip' => 'string',
        'stateCode' => 'string',
        'companyNr' => 'string',
        'companyVats' => '\Retailys\Model\CompanyModelCompanyVats[]',
        'phone' => 'string',
        'email' => 'string',
        'registryInfo' => 'string',
        'bankAccounts' => '\Retailys\Model\CompanyModelBankAccounts[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'street' => null,
        'city' => null,
        'zip' => null,
        'stateCode' => null,
        'companyNr' => null,
        'companyVats' => null,
        'phone' => null,
        'email' => null,
        'registryInfo' => null,
        'bankAccounts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'street' => 'street',
        'city' => 'city',
        'zip' => 'zip',
        'stateCode' => 'state_code',
        'companyNr' => 'company_nr',
        'companyVats' => 'company_vats',
        'phone' => 'phone',
        'email' => 'email',
        'registryInfo' => 'registry_info',
        'bankAccounts' => 'bank_accounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'street' => 'setStreet',
        'city' => 'setCity',
        'zip' => 'setZip',
        'stateCode' => 'setStateCode',
        'companyNr' => 'setCompanyNr',
        'companyVats' => 'setCompanyVats',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'registryInfo' => 'setRegistryInfo',
        'bankAccounts' => 'setBankAccounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'street' => 'getStreet',
        'city' => 'getCity',
        'zip' => 'getZip',
        'stateCode' => 'getStateCode',
        'companyNr' => 'getCompanyNr',
        'companyVats' => 'getCompanyVats',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'registryInfo' => 'getRegistryInfo',
        'bankAccounts' => 'getBankAccounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['street'] = $data['street'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['stateCode'] = $data['stateCode'] ?? null;
        $this->container['companyNr'] = $data['companyNr'] ?? null;
        $this->container['companyVats'] = $data['companyVats'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['registryInfo'] = $data['registryInfo'] ?? null;
        $this->container['bankAccounts'] = $data['bankAccounts'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Company identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Company name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street Company street.
     *
     * @return self
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city Company city.
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Company zip.
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets stateCode
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['stateCode'];
    }

    /**
     * Sets stateCode
     *
     * @param string|null $stateCode Company state code.
     *
     * @return self
     */
    public function setStateCode($stateCode)
    {
        $this->container['stateCode'] = $stateCode;

        return $this;
    }

    /**
     * Gets companyNr
     *
     * @return string|null
     */
    public function getCompanyNr()
    {
        return $this->container['companyNr'];
    }

    /**
     * Sets companyNr
     *
     * @param string|null $companyNr Company number.
     *
     * @return self
     */
    public function setCompanyNr($companyNr)
    {
        $this->container['companyNr'] = $companyNr;

        return $this;
    }

    /**
     * Gets companyVats
     *
     * @return \Retailys\Model\CompanyModelCompanyVats[]|null
     */
    public function getCompanyVats()
    {
        return $this->container['companyVats'];
    }

    /**
     * Sets companyVats
     *
     * @param \Retailys\Model\CompanyModelCompanyVats[]|null $companyVats Company Vats.
     *
     * @return self
     */
    public function setCompanyVats($companyVats)
    {
        $this->container['companyVats'] = $companyVats;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Company phone.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Company email.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets registryInfo
     *
     * @return string|null
     */
    public function getRegistryInfo()
    {
        return $this->container['registryInfo'];
    }

    /**
     * Sets registryInfo
     *
     * @param string|null $registryInfo Company registry info.
     *
     * @return self
     */
    public function setRegistryInfo($registryInfo)
    {
        $this->container['registryInfo'] = $registryInfo;

        return $this;
    }

    /**
     * Gets bankAccounts
     *
     * @return \Retailys\Model\CompanyModelBankAccounts[]|null
     */
    public function getBankAccounts()
    {
        return $this->container['bankAccounts'];
    }

    /**
     * Sets bankAccounts
     *
     * @param \Retailys\Model\CompanyModelBankAccounts[]|null $bankAccounts Company Bank Accounts.
     *
     * @return self
     */
    public function setBankAccounts($bankAccounts)
    {
        $this->container['bankAccounts'] = $bankAccounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


