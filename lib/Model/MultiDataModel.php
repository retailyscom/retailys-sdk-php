<?php
/**
 * MultiDataModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Retailys API
 *
 * Communication API restful e-commerce system Retailys. Get access in system at [https://www.retailys.com](https://www.retailys.com)<h1>Introduction</h1>**Retailys API** allows to create an amazing ecosystem of e-commerce services and help to develop robust webshops and other e-commerce solutions. Thanks to many built-in omnichannel and multichannel principles, every developer has possibility tu use **Retailys API** for creating vast global e-commerce applications easily and effectively.
 *
 * The version of the OpenAPI document: 1.1.02
 * Contact: helpdesk@retailys.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Retailys\Model;

use \ArrayAccess;
use \Retailys\ObjectSerializer;

/**
 * MultiDataModel Class Doc Comment
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MultiDataModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MultiDataModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'channel' => 'OneOfNonExpandedModelChannelModel',
        'active' => 'bool',
        'available' => 'bool',
        'name' => 'string',
        'shortContent' => 'string',
        'content' => 'string',
        'url' => 'string',
        'categories' => 'mixed',
        'retailPrice' => '\Retailys\Model\PriceModel',
        'price' => '\Retailys\Model\PriceModel',
        'images' => '\Retailys\Model\MultiDataModelImages[]',
        'parameters' => '\Retailys\Model\MultiDataModelParameters[]',
        'stores' => '\Retailys\Model\MultiDataModelStores[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'channel' => null,
        'active' => null,
        'available' => null,
        'name' => null,
        'shortContent' => null,
        'content' => null,
        'url' => null,
        'categories' => null,
        'retailPrice' => null,
        'price' => null,
        'images' => null,
        'parameters' => null,
        'stores' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'channel' => 'channel',
        'active' => 'active',
        'available' => 'available',
        'name' => 'name',
        'shortContent' => 'short_content',
        'content' => 'content',
        'url' => 'url',
        'categories' => 'categories',
        'retailPrice' => 'retail_price',
        'price' => 'price',
        'images' => 'images',
        'parameters' => 'parameters',
        'stores' => 'stores'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'channel' => 'setChannel',
        'active' => 'setActive',
        'available' => 'setAvailable',
        'name' => 'setName',
        'shortContent' => 'setShortContent',
        'content' => 'setContent',
        'url' => 'setUrl',
        'categories' => 'setCategories',
        'retailPrice' => 'setRetailPrice',
        'price' => 'setPrice',
        'images' => 'setImages',
        'parameters' => 'setParameters',
        'stores' => 'setStores'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'channel' => 'getChannel',
        'active' => 'getActive',
        'available' => 'getAvailable',
        'name' => 'getName',
        'shortContent' => 'getShortContent',
        'content' => 'getContent',
        'url' => 'getUrl',
        'categories' => 'getCategories',
        'retailPrice' => 'getRetailPrice',
        'price' => 'getPrice',
        'images' => 'getImages',
        'parameters' => 'getParameters',
        'stores' => 'getStores'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['active'] = $data['active'] ?? null;
        $this->container['available'] = $data['available'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['shortContent'] = $data['shortContent'] ?? null;
        $this->container['content'] = $data['content'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['categories'] = $data['categories'] ?? null;
        $this->container['retailPrice'] = $data['retailPrice'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['images'] = $data['images'] ?? null;
        $this->container['parameters'] = $data['parameters'] ?? null;
        $this->container['stores'] = $data['stores'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Article Multidata ID.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return OneOfNonExpandedModelChannelModel|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param OneOfNonExpandedModelChannelModel|null $channel Channel.
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Article on channel is active.
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets available
     *
     * @return bool|null
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param bool|null $available Article on channel is available.
     *
     * @return self
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of article on channel.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets shortContent
     *
     * @return string|null
     */
    public function getShortContent()
    {
        return $this->container['shortContent'];
    }

    /**
     * Sets shortContent
     *
     * @param string|null $shortContent Short content of article on channel.
     *
     * @return self
     */
    public function setShortContent($shortContent)
    {
        $this->container['shortContent'] = $shortContent;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content Content of article on channel.
     *
     * @return self
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url Url of article on channel.
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return mixed|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param mixed|null $categories categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets retailPrice
     *
     * @return \Retailys\Model\PriceModel|null
     */
    public function getRetailPrice()
    {
        return $this->container['retailPrice'];
    }

    /**
     * Sets retailPrice
     *
     * @param \Retailys\Model\PriceModel|null $retailPrice retailPrice
     *
     * @return self
     */
    public function setRetailPrice($retailPrice)
    {
        $this->container['retailPrice'] = $retailPrice;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Retailys\Model\PriceModel|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Retailys\Model\PriceModel|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \Retailys\Model\MultiDataModelImages[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \Retailys\Model\MultiDataModelImages[]|null $images Article images.
     *
     * @return self
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Retailys\Model\MultiDataModelParameters[]|null
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Retailys\Model\MultiDataModelParameters[]|null $parameters Article parameters.
     *
     * @return self
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets stores
     *
     * @return \Retailys\Model\MultiDataModelStores[]|null
     */
    public function getStores()
    {
        return $this->container['stores'];
    }

    /**
     * Sets stores
     *
     * @param \Retailys\Model\MultiDataModelStores[]|null $stores Articles on stores.
     *
     * @return self
     */
    public function setStores($stores)
    {
        $this->container['stores'] = $stores;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


