<?php
/**
 * UserPostRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Retailys API
 *
 * Communication API restful e-commerce system Retailys. Get access in system at [https://www.retailys.com](https://www.retailys.com)<h1>Introduction</h1>**Retailys API** allows to create an amazing ecosystem of e-commerce services and help to develop robust webshops and other e-commerce solutions. Thanks to many built-in omnichannel and multichannel principles, every developer has possibility tu use **Retailys API** for creating vast global e-commerce applications easily and effectively.
 *
 * The version of the OpenAPI document: 1.1.02
 * Contact: helpdesk@retailys.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Retailys\Model;

use \ArrayAccess;
use \Retailys\ObjectSerializer;

/**
 * UserPostRequest Class Doc Comment
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UserPostRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserPostRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel' => 'string',
        'login' => 'string',
        'email' => 'string',
        'newsletter' => 'bool',
        'name' => 'string',
        'nameName' => 'string',
        'firstName' => 'string',
        'middleName' => 'string',
        'surname' => 'string',
        'title' => 'string',
        'organizationName' => 'string',
        'street' => 'string',
        'city' => 'string',
        'zip' => 'string',
        'stateCode' => 'string',
        'phone' => 'string',
        'www' => 'string',
        'sexMan' => 'int',
        'deliveryName' => 'string',
        'deliveryStreet' => 'string',
        'deliveryCity' => 'string',
        'deliveryZip' => 'string',
        'deliveryStateCode' => 'string',
        'deliveryPhone' => 'string',
        'deliveryEmail' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel' => null,
        'login' => null,
        'email' => null,
        'newsletter' => null,
        'name' => null,
        'nameName' => null,
        'firstName' => null,
        'middleName' => null,
        'surname' => null,
        'title' => null,
        'organizationName' => null,
        'street' => null,
        'city' => null,
        'zip' => null,
        'stateCode' => null,
        'phone' => null,
        'www' => null,
        'sexMan' => null,
        'deliveryName' => null,
        'deliveryStreet' => null,
        'deliveryCity' => null,
        'deliveryZip' => null,
        'deliveryStateCode' => null,
        'deliveryPhone' => null,
        'deliveryEmail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel' => 'channel',
        'login' => 'login',
        'email' => 'email',
        'newsletter' => 'newsletter',
        'name' => 'name',
        'nameName' => 'name_name',
        'firstName' => 'first_name',
        'middleName' => 'middle_name',
        'surname' => 'surname',
        'title' => 'title',
        'organizationName' => 'organization_name',
        'street' => 'street',
        'city' => 'city',
        'zip' => 'zip',
        'stateCode' => 'state_code',
        'phone' => 'phone',
        'www' => 'www',
        'sexMan' => 'sex_man',
        'deliveryName' => 'delivery_name',
        'deliveryStreet' => 'delivery_street',
        'deliveryCity' => 'delivery_city',
        'deliveryZip' => 'delivery_zip',
        'deliveryStateCode' => 'delivery_state_code',
        'deliveryPhone' => 'delivery_phone',
        'deliveryEmail' => 'delivery_email'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel' => 'setChannel',
        'login' => 'setLogin',
        'email' => 'setEmail',
        'newsletter' => 'setNewsletter',
        'name' => 'setName',
        'nameName' => 'setNameName',
        'firstName' => 'setFirstName',
        'middleName' => 'setMiddleName',
        'surname' => 'setSurname',
        'title' => 'setTitle',
        'organizationName' => 'setOrganizationName',
        'street' => 'setStreet',
        'city' => 'setCity',
        'zip' => 'setZip',
        'stateCode' => 'setStateCode',
        'phone' => 'setPhone',
        'www' => 'setWww',
        'sexMan' => 'setSexMan',
        'deliveryName' => 'setDeliveryName',
        'deliveryStreet' => 'setDeliveryStreet',
        'deliveryCity' => 'setDeliveryCity',
        'deliveryZip' => 'setDeliveryZip',
        'deliveryStateCode' => 'setDeliveryStateCode',
        'deliveryPhone' => 'setDeliveryPhone',
        'deliveryEmail' => 'setDeliveryEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel' => 'getChannel',
        'login' => 'getLogin',
        'email' => 'getEmail',
        'newsletter' => 'getNewsletter',
        'name' => 'getName',
        'nameName' => 'getNameName',
        'firstName' => 'getFirstName',
        'middleName' => 'getMiddleName',
        'surname' => 'getSurname',
        'title' => 'getTitle',
        'organizationName' => 'getOrganizationName',
        'street' => 'getStreet',
        'city' => 'getCity',
        'zip' => 'getZip',
        'stateCode' => 'getStateCode',
        'phone' => 'getPhone',
        'www' => 'getWww',
        'sexMan' => 'getSexMan',
        'deliveryName' => 'getDeliveryName',
        'deliveryStreet' => 'getDeliveryStreet',
        'deliveryCity' => 'getDeliveryCity',
        'deliveryZip' => 'getDeliveryZip',
        'deliveryStateCode' => 'getDeliveryStateCode',
        'deliveryPhone' => 'getDeliveryPhone',
        'deliveryEmail' => 'getDeliveryEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const SEX_MAN_0 = 0;
    const SEX_MAN_1 = 1;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSexManAllowableValues()
    {
        return [
            self::SEX_MAN_0,
            self::SEX_MAN_1,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['login'] = $data['login'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['newsletter'] = $data['newsletter'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['nameName'] = $data['nameName'] ?? null;
        $this->container['firstName'] = $data['firstName'] ?? null;
        $this->container['middleName'] = $data['middleName'] ?? null;
        $this->container['surname'] = $data['surname'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['organizationName'] = $data['organizationName'] ?? null;
        $this->container['street'] = $data['street'] ?? null;
        $this->container['city'] = $data['city'] ?? null;
        $this->container['zip'] = $data['zip'] ?? null;
        $this->container['stateCode'] = $data['stateCode'] ?? null;
        $this->container['phone'] = $data['phone'] ?? null;
        $this->container['www'] = $data['www'] ?? null;
        $this->container['sexMan'] = $data['sexMan'] ?? null;
        $this->container['deliveryName'] = $data['deliveryName'] ?? null;
        $this->container['deliveryStreet'] = $data['deliveryStreet'] ?? null;
        $this->container['deliveryCity'] = $data['deliveryCity'] ?? null;
        $this->container['deliveryZip'] = $data['deliveryZip'] ?? null;
        $this->container['deliveryStateCode'] = $data['deliveryStateCode'] ?? null;
        $this->container['deliveryPhone'] = $data['deliveryPhone'] ?? null;
        $this->container['deliveryEmail'] = $data['deliveryEmail'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSexManAllowableValues();
        if (!is_null($this->container['sexMan']) && !in_array($this->container['sexMan'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sexMan', must be one of '%s'",
                $this->container['sexMan'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel
     *
     * @return string|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string|null $channel Channel.
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string|null
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string|null $login Login.
     *
     * @return self
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email.
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets newsletter
     *
     * @return bool|null
     */
    public function getNewsletter()
    {
        return $this->container['newsletter'];
    }

    /**
     * Sets newsletter
     *
     * @param bool|null $newsletter Newsletter.
     *
     * @return self
     */
    public function setNewsletter($newsletter)
    {
        $this->container['newsletter'] = $newsletter;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nameName
     *
     * @return string|null
     */
    public function getNameName()
    {
        return $this->container['nameName'];
    }

    /**
     * Sets nameName
     *
     * @param string|null $nameName Nick Name.
     *
     * @return self
     */
    public function setNameName($nameName)
    {
        $this->container['nameName'] = $nameName;

        return $this;
    }

    /**
     * Gets firstName
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['firstName'];
    }

    /**
     * Sets firstName
     *
     * @param string|null $firstName First Name.
     *
     * @return self
     */
    public function setFirstName($firstName)
    {
        $this->container['firstName'] = $firstName;

        return $this;
    }

    /**
     * Gets middleName
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middleName'];
    }

    /**
     * Sets middleName
     *
     * @param string|null $middleName Middle Name.
     *
     * @return self
     */
    public function setMiddleName($middleName)
    {
        $this->container['middleName'] = $middleName;

        return $this;
    }

    /**
     * Gets surname
     *
     * @return string|null
     */
    public function getSurname()
    {
        return $this->container['surname'];
    }

    /**
     * Sets surname
     *
     * @param string|null $surname Surname.
     *
     * @return self
     */
    public function setSurname($surname)
    {
        $this->container['surname'] = $surname;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title.
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets organizationName
     *
     * @return string|null
     */
    public function getOrganizationName()
    {
        return $this->container['organizationName'];
    }

    /**
     * Sets organizationName
     *
     * @param string|null $organizationName Organization Name.
     *
     * @return self
     */
    public function setOrganizationName($organizationName)
    {
        $this->container['organizationName'] = $organizationName;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street Street.
     *
     * @return self
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City.
     *
     * @return self
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip Zip code.
     *
     * @return self
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets stateCode
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['stateCode'];
    }

    /**
     * Sets stateCode
     *
     * @param string|null $stateCode State code.
     *
     * @return self
     */
    public function setStateCode($stateCode)
    {
        $this->container['stateCode'] = $stateCode;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Phone.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets www
     *
     * @return string|null
     */
    public function getWww()
    {
        return $this->container['www'];
    }

    /**
     * Sets www
     *
     * @param string|null $www Website.
     *
     * @return self
     */
    public function setWww($www)
    {
        $this->container['www'] = $www;

        return $this;
    }

    /**
     * Gets sexMan
     *
     * @return int|null
     */
    public function getSexMan()
    {
        return $this->container['sexMan'];
    }

    /**
     * Sets sexMan
     *
     * @param int|null $sexMan Sex man.
     *
     * @return self
     */
    public function setSexMan($sexMan)
    {
        $allowedValues = $this->getSexManAllowableValues();
        if (!is_null($sexMan) && !in_array($sexMan, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sexMan', must be one of '%s'",
                    $sexMan,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sexMan'] = $sexMan;

        return $this;
    }

    /**
     * Gets deliveryName
     *
     * @return string|null
     */
    public function getDeliveryName()
    {
        return $this->container['deliveryName'];
    }

    /**
     * Sets deliveryName
     *
     * @param string|null $deliveryName Delivery Name.
     *
     * @return self
     */
    public function setDeliveryName($deliveryName)
    {
        $this->container['deliveryName'] = $deliveryName;

        return $this;
    }

    /**
     * Gets deliveryStreet
     *
     * @return string|null
     */
    public function getDeliveryStreet()
    {
        return $this->container['deliveryStreet'];
    }

    /**
     * Sets deliveryStreet
     *
     * @param string|null $deliveryStreet Delivery Street.
     *
     * @return self
     */
    public function setDeliveryStreet($deliveryStreet)
    {
        $this->container['deliveryStreet'] = $deliveryStreet;

        return $this;
    }

    /**
     * Gets deliveryCity
     *
     * @return string|null
     */
    public function getDeliveryCity()
    {
        return $this->container['deliveryCity'];
    }

    /**
     * Sets deliveryCity
     *
     * @param string|null $deliveryCity Delivery City.
     *
     * @return self
     */
    public function setDeliveryCity($deliveryCity)
    {
        $this->container['deliveryCity'] = $deliveryCity;

        return $this;
    }

    /**
     * Gets deliveryZip
     *
     * @return string|null
     */
    public function getDeliveryZip()
    {
        return $this->container['deliveryZip'];
    }

    /**
     * Sets deliveryZip
     *
     * @param string|null $deliveryZip Delivery Zip code.
     *
     * @return self
     */
    public function setDeliveryZip($deliveryZip)
    {
        $this->container['deliveryZip'] = $deliveryZip;

        return $this;
    }

    /**
     * Gets deliveryStateCode
     *
     * @return string|null
     */
    public function getDeliveryStateCode()
    {
        return $this->container['deliveryStateCode'];
    }

    /**
     * Sets deliveryStateCode
     *
     * @param string|null $deliveryStateCode Delivery State code.
     *
     * @return self
     */
    public function setDeliveryStateCode($deliveryStateCode)
    {
        $this->container['deliveryStateCode'] = $deliveryStateCode;

        return $this;
    }

    /**
     * Gets deliveryPhone
     *
     * @return string|null
     */
    public function getDeliveryPhone()
    {
        return $this->container['deliveryPhone'];
    }

    /**
     * Sets deliveryPhone
     *
     * @param string|null $deliveryPhone Delivery Phone.
     *
     * @return self
     */
    public function setDeliveryPhone($deliveryPhone)
    {
        $this->container['deliveryPhone'] = $deliveryPhone;

        return $this;
    }

    /**
     * Gets deliveryEmail
     *
     * @return string|null
     */
    public function getDeliveryEmail()
    {
        return $this->container['deliveryEmail'];
    }

    /**
     * Sets deliveryEmail
     *
     * @param string|null $deliveryEmail Delivery Email.
     *
     * @return self
     */
    public function setDeliveryEmail($deliveryEmail)
    {
        $this->container['deliveryEmail'] = $deliveryEmail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


