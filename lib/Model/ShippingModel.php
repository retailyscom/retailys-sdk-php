<?php
/**
 * ShippingModel
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Retailys API
 *
 * Communication API restful e-commerce system Retailys. Get access in system at [https://www.retailys.com](https://www.retailys.com)<h1>Introduction</h1>**Retailys API** allows to create an amazing ecosystem of e-commerce services and help to develop robust webshops and other e-commerce solutions. Thanks to many built-in omnichannel and multichannel principles, every developer has possibility tu use **Retailys API** for creating vast global e-commerce applications easily and effectively.
 *
 * The version of the OpenAPI document: 1.1.02
 * Contact: helpdesk@retailys.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Retailys\Model;

use \ArrayAccess;
use \Retailys\ObjectSerializer;

/**
 * ShippingModel Class Doc Comment
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ShippingModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShippingModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'shipper' => 'OneOfNonExpandedModelShipperModel',
        'channel' => 'OneOfNonExpandedModelChannelModel',
        'name' => 'string',
        'description' => 'string',
        'stateCode' => 'string',
        'continentCode' => 'string',
        'timeFrom' => 'int',
        'timeTo' => 'int',
        'moneyFrom' => 'float',
        'moneyTo' => 'float',
        'price' => 'float',
        'currency' => 'string',
        'payments' => 'OneOfNonExpandedModelPaymentModel',
        'iconUrl' => 'string',
        'sort' => 'int',
        'app' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'shipper' => null,
        'channel' => null,
        'name' => null,
        'description' => null,
        'stateCode' => null,
        'continentCode' => null,
        'timeFrom' => null,
        'timeTo' => null,
        'moneyFrom' => 'float',
        'moneyTo' => 'float',
        'price' => 'float',
        'currency' => null,
        'payments' => null,
        'iconUrl' => null,
        'sort' => null,
        'app' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'shipper' => 'shipper',
        'channel' => 'channel',
        'name' => 'name',
        'description' => 'description',
        'stateCode' => 'state_code',
        'continentCode' => 'continent_code',
        'timeFrom' => 'time_from',
        'timeTo' => 'time_to',
        'moneyFrom' => 'money_from',
        'moneyTo' => 'money_to',
        'price' => 'price',
        'currency' => 'currency',
        'payments' => 'payments',
        'iconUrl' => 'icon_url',
        'sort' => 'sort',
        'app' => 'app'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'shipper' => 'setShipper',
        'channel' => 'setChannel',
        'name' => 'setName',
        'description' => 'setDescription',
        'stateCode' => 'setStateCode',
        'continentCode' => 'setContinentCode',
        'timeFrom' => 'setTimeFrom',
        'timeTo' => 'setTimeTo',
        'moneyFrom' => 'setMoneyFrom',
        'moneyTo' => 'setMoneyTo',
        'price' => 'setPrice',
        'currency' => 'setCurrency',
        'payments' => 'setPayments',
        'iconUrl' => 'setIconUrl',
        'sort' => 'setSort',
        'app' => 'setApp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'shipper' => 'getShipper',
        'channel' => 'getChannel',
        'name' => 'getName',
        'description' => 'getDescription',
        'stateCode' => 'getStateCode',
        'continentCode' => 'getContinentCode',
        'timeFrom' => 'getTimeFrom',
        'timeTo' => 'getTimeTo',
        'moneyFrom' => 'getMoneyFrom',
        'moneyTo' => 'getMoneyTo',
        'price' => 'getPrice',
        'currency' => 'getCurrency',
        'payments' => 'getPayments',
        'iconUrl' => 'getIconUrl',
        'sort' => 'getSort',
        'app' => 'getApp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['shipper'] = $data['shipper'] ?? null;
        $this->container['channel'] = $data['channel'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['stateCode'] = $data['stateCode'] ?? null;
        $this->container['continentCode'] = $data['continentCode'] ?? null;
        $this->container['timeFrom'] = $data['timeFrom'] ?? null;
        $this->container['timeTo'] = $data['timeTo'] ?? null;
        $this->container['moneyFrom'] = $data['moneyFrom'] ?? null;
        $this->container['moneyTo'] = $data['moneyTo'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['payments'] = $data['payments'] ?? null;
        $this->container['iconUrl'] = $data['iconUrl'] ?? null;
        $this->container['sort'] = $data['sort'] ?? null;
        $this->container['app'] = $data['app'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Shipping identifier.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets shipper
     *
     * @return OneOfNonExpandedModelShipperModel|null
     */
    public function getShipper()
    {
        return $this->container['shipper'];
    }

    /**
     * Sets shipper
     *
     * @param OneOfNonExpandedModelShipperModel|null $shipper Shipper.
     *
     * @return self
     */
    public function setShipper($shipper)
    {
        $this->container['shipper'] = $shipper;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return OneOfNonExpandedModelChannelModel|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param OneOfNonExpandedModelChannelModel|null $channel Channel.
     *
     * @return self
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Shipping name.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Shipping description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets stateCode
     *
     * @return string|null
     */
    public function getStateCode()
    {
        return $this->container['stateCode'];
    }

    /**
     * Sets stateCode
     *
     * @param string|null $stateCode Shipping state code.
     *
     * @return self
     */
    public function setStateCode($stateCode)
    {
        $this->container['stateCode'] = $stateCode;

        return $this;
    }

    /**
     * Gets continentCode
     *
     * @return string|null
     */
    public function getContinentCode()
    {
        return $this->container['continentCode'];
    }

    /**
     * Sets continentCode
     *
     * @param string|null $continentCode Shipping continent code.
     *
     * @return self
     */
    public function setContinentCode($continentCode)
    {
        $this->container['continentCode'] = $continentCode;

        return $this;
    }

    /**
     * Gets timeFrom
     *
     * @return int|null
     */
    public function getTimeFrom()
    {
        return $this->container['timeFrom'];
    }

    /**
     * Sets timeFrom
     *
     * @param int|null $timeFrom Shipping delivery from.
     *
     * @return self
     */
    public function setTimeFrom($timeFrom)
    {
        $this->container['timeFrom'] = $timeFrom;

        return $this;
    }

    /**
     * Gets timeTo
     *
     * @return int|null
     */
    public function getTimeTo()
    {
        return $this->container['timeTo'];
    }

    /**
     * Sets timeTo
     *
     * @param int|null $timeTo Shipping delivery to.
     *
     * @return self
     */
    public function setTimeTo($timeTo)
    {
        $this->container['timeTo'] = $timeTo;

        return $this;
    }

    /**
     * Gets moneyFrom
     *
     * @return float|null
     */
    public function getMoneyFrom()
    {
        return $this->container['moneyFrom'];
    }

    /**
     * Sets moneyFrom
     *
     * @param float|null $moneyFrom Money from.
     *
     * @return self
     */
    public function setMoneyFrom($moneyFrom)
    {
        $this->container['moneyFrom'] = $moneyFrom;

        return $this;
    }

    /**
     * Gets moneyTo
     *
     * @return float|null
     */
    public function getMoneyTo()
    {
        return $this->container['moneyTo'];
    }

    /**
     * Sets moneyTo
     *
     * @param float|null $moneyTo Money to.
     *
     * @return self
     */
    public function setMoneyTo($moneyTo)
    {
        $this->container['moneyTo'] = $moneyTo;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Shipping price.
     *
     * @return self
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Shipping price currency.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return OneOfNonExpandedModelPaymentModel|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param OneOfNonExpandedModelPaymentModel|null $payments Shipping posible payments.
     *
     * @return self
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets iconUrl
     *
     * @return string|null
     */
    public function getIconUrl()
    {
        return $this->container['iconUrl'];
    }

    /**
     * Sets iconUrl
     *
     * @param string|null $iconUrl Shipping icon url.
     *
     * @return self
     */
    public function setIconUrl($iconUrl)
    {
        $this->container['iconUrl'] = $iconUrl;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return int|null
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param int|null $sort Shipping sort.
     *
     * @return self
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets app
     *
     * @return int|null
     */
    public function getApp()
    {
        return $this->container['app'];
    }

    /**
     * Sets app
     *
     * @param int|null $app Shipping App ID.
     *
     * @return self
     */
    public function setApp($app)
    {
        $this->container['app'] = $app;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


