<?php
/**
 * SystemOrdersApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Retailys API
 *
 * Communication API restful e-commerce system Retailys. Get access in system at [https://www.retailys.com](https://www.retailys.com)<h1>Introduction</h1>**Retailys API** allows to create an amazing ecosystem of e-commerce services and help to develop robust webshops and other e-commerce solutions. Thanks to many built-in omnichannel and multichannel principles, every developer has possibility tu use **Retailys API** for creating vast global e-commerce applications easily and effectively.
 *
 * The version of the OpenAPI document: 1.1.02
 * Contact: helpdesk@retailys.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Retailys\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Retailys\ApiException;
use Retailys\Configuration;
use Retailys\HeaderSelector;
use Retailys\ObjectSerializer;

/**
 * SystemOrdersApi Class Doc Comment
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SystemOrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteOrderItem
     *
     * Delete item in Order by ID
     *
     * @param  int $orderId Order ID (required)
     * @param  int $orderItemId Order item ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\IdModel
     */
    public function deleteOrderItem($orderId, $orderItemId)
    {
        list($response) = $this->deleteOrderItemWithHttpInfo($orderId, $orderItemId);
        return $response;
    }

    /**
     * Operation deleteOrderItemWithHttpInfo
     *
     * Delete item in Order by ID
     *
     * @param  int $orderId Order ID (required)
     * @param  int $orderItemId Order item ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\IdModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrderItemWithHttpInfo($orderId, $orderItemId)
    {
        $request = $this->deleteOrderItemRequest($orderId, $orderItemId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\IdModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\IdModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\IdModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\IdModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrderItemAsync
     *
     * Delete item in Order by ID
     *
     * @param  int $orderId Order ID (required)
     * @param  int $orderItemId Order item ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrderItemAsync($orderId, $orderItemId)
    {
        return $this->deleteOrderItemAsyncWithHttpInfo($orderId, $orderItemId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrderItemAsyncWithHttpInfo
     *
     * Delete item in Order by ID
     *
     * @param  int $orderId Order ID (required)
     * @param  int $orderItemId Order item ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrderItemAsyncWithHttpInfo($orderId, $orderItemId)
    {
        $returnType = '\Retailys\Model\IdModel';
        $request = $this->deleteOrderItemRequest($orderId, $orderItemId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrderItem'
     *
     * @param  int $orderId Order ID (required)
     * @param  int $orderItemId Order item ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteOrderItemRequest($orderId, $orderItemId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling deleteOrderItem'
            );
        }
        // verify the required parameter 'orderItemId' is set
        if ($orderItemId === null || (is_array($orderItemId) && count($orderItemId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderItemId when calling deleteOrderItem'
            );
        }

        $resourcePath = '/System/Orders/{order-id}/item/{order-item-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }
        // path params
        if ($orderItemId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-item-id' . '}',
                ObjectSerializer::toPathValue($orderItemId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrder
     *
     * Find order by ID
     *
     * @param  int $orderId Order ID (required)
     * @param  bool $expanded Expanded data model (optional, default to false)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\OrderModel
     */
    public function getOrder($orderId, $expanded = false)
    {
        list($response) = $this->getOrderWithHttpInfo($orderId, $expanded);
        return $response;
    }

    /**
     * Operation getOrderWithHttpInfo
     *
     * Find order by ID
     *
     * @param  int $orderId Order ID (required)
     * @param  bool $expanded Expanded data model (optional, default to false)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\OrderModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderWithHttpInfo($orderId, $expanded = false)
    {
        $request = $this->getOrderRequest($orderId, $expanded);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\OrderModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\OrderModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\OrderModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\OrderModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderAsync
     *
     * Find order by ID
     *
     * @param  int $orderId Order ID (required)
     * @param  bool $expanded Expanded data model (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderAsync($orderId, $expanded = false)
    {
        return $this->getOrderAsyncWithHttpInfo($orderId, $expanded)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderAsyncWithHttpInfo
     *
     * Find order by ID
     *
     * @param  int $orderId Order ID (required)
     * @param  bool $expanded Expanded data model (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderAsyncWithHttpInfo($orderId, $expanded = false)
    {
        $returnType = '\Retailys\Model\OrderModel';
        $request = $this->getOrderRequest($orderId, $expanded);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrder'
     *
     * @param  int $orderId Order ID (required)
     * @param  bool $expanded Expanded data model (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrderRequest($orderId, $expanded = false)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling getOrder'
            );
        }

        $resourcePath = '/System/Orders/{order-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expanded !== null) {
            if('form' === 'form' && is_array($expanded)) {
                foreach($expanded as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['expanded'] = $expanded;
            }
        }


        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrders
     *
     * Find orders by params
     *
     * @param  int $channelId Channel ID (optional)
     * @param  int $companyId Company ID (optional)
     * @param  int $customerId Customer ID (optional)
     * @param  bool $done Finished Orders (optional)
     * @param  bool $canceled Canceled Orders (optional)
     * @param  int $statusId Order status ID (optional)
     * @param  \DateTime $from Orders from date (2019-12-01T08:15:30+01:00) (optional)
     * @param  \DateTime $to Orders to date (2019-12-15T08:15:30+01:00) (optional)
     * @param  string $tracking Package tracking number (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Orders per page (min:10 max:250) (optional, default to 10)
     * @param  bool $expanded Expanded data model (optional, default to false)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\OrdersModel|\Retailys\Model\ErrorModel|\Retailys\Model\ErrorModel
     */
    public function getOrders($channelId = null, $companyId = null, $customerId = null, $done = null, $canceled = null, $statusId = null, $from = null, $to = null, $tracking = null, $page = 1, $perPage = 10, $expanded = false)
    {
        list($response) = $this->getOrdersWithHttpInfo($channelId, $companyId, $customerId, $done, $canceled, $statusId, $from, $to, $tracking, $page, $perPage, $expanded);
        return $response;
    }

    /**
     * Operation getOrdersWithHttpInfo
     *
     * Find orders by params
     *
     * @param  int $channelId Channel ID (optional)
     * @param  int $companyId Company ID (optional)
     * @param  int $customerId Customer ID (optional)
     * @param  bool $done Finished Orders (optional)
     * @param  bool $canceled Canceled Orders (optional)
     * @param  int $statusId Order status ID (optional)
     * @param  \DateTime $from Orders from date (2019-12-01T08:15:30+01:00) (optional)
     * @param  \DateTime $to Orders to date (2019-12-15T08:15:30+01:00) (optional)
     * @param  string $tracking Package tracking number (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Orders per page (min:10 max:250) (optional, default to 10)
     * @param  bool $expanded Expanded data model (optional, default to false)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\OrdersModel|\Retailys\Model\ErrorModel|\Retailys\Model\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrdersWithHttpInfo($channelId = null, $companyId = null, $customerId = null, $done = null, $canceled = null, $statusId = null, $from = null, $to = null, $tracking = null, $page = 1, $perPage = 10, $expanded = false)
    {
        $request = $this->getOrdersRequest($channelId, $companyId, $customerId, $done, $canceled, $statusId, $from, $to, $tracking, $page, $perPage, $expanded);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\OrdersModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\OrdersModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\OrdersModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\OrdersModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrdersAsync
     *
     * Find orders by params
     *
     * @param  int $channelId Channel ID (optional)
     * @param  int $companyId Company ID (optional)
     * @param  int $customerId Customer ID (optional)
     * @param  bool $done Finished Orders (optional)
     * @param  bool $canceled Canceled Orders (optional)
     * @param  int $statusId Order status ID (optional)
     * @param  \DateTime $from Orders from date (2019-12-01T08:15:30+01:00) (optional)
     * @param  \DateTime $to Orders to date (2019-12-15T08:15:30+01:00) (optional)
     * @param  string $tracking Package tracking number (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Orders per page (min:10 max:250) (optional, default to 10)
     * @param  bool $expanded Expanded data model (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrdersAsync($channelId = null, $companyId = null, $customerId = null, $done = null, $canceled = null, $statusId = null, $from = null, $to = null, $tracking = null, $page = 1, $perPage = 10, $expanded = false)
    {
        return $this->getOrdersAsyncWithHttpInfo($channelId, $companyId, $customerId, $done, $canceled, $statusId, $from, $to, $tracking, $page, $perPage, $expanded)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrdersAsyncWithHttpInfo
     *
     * Find orders by params
     *
     * @param  int $channelId Channel ID (optional)
     * @param  int $companyId Company ID (optional)
     * @param  int $customerId Customer ID (optional)
     * @param  bool $done Finished Orders (optional)
     * @param  bool $canceled Canceled Orders (optional)
     * @param  int $statusId Order status ID (optional)
     * @param  \DateTime $from Orders from date (2019-12-01T08:15:30+01:00) (optional)
     * @param  \DateTime $to Orders to date (2019-12-15T08:15:30+01:00) (optional)
     * @param  string $tracking Package tracking number (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Orders per page (min:10 max:250) (optional, default to 10)
     * @param  bool $expanded Expanded data model (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrdersAsyncWithHttpInfo($channelId = null, $companyId = null, $customerId = null, $done = null, $canceled = null, $statusId = null, $from = null, $to = null, $tracking = null, $page = 1, $perPage = 10, $expanded = false)
    {
        $returnType = '\Retailys\Model\OrdersModel';
        $request = $this->getOrdersRequest($channelId, $companyId, $customerId, $done, $canceled, $statusId, $from, $to, $tracking, $page, $perPage, $expanded);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrders'
     *
     * @param  int $channelId Channel ID (optional)
     * @param  int $companyId Company ID (optional)
     * @param  int $customerId Customer ID (optional)
     * @param  bool $done Finished Orders (optional)
     * @param  bool $canceled Canceled Orders (optional)
     * @param  int $statusId Order status ID (optional)
     * @param  \DateTime $from Orders from date (2019-12-01T08:15:30+01:00) (optional)
     * @param  \DateTime $to Orders to date (2019-12-15T08:15:30+01:00) (optional)
     * @param  string $tracking Package tracking number (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Orders per page (min:10 max:250) (optional, default to 10)
     * @param  bool $expanded Expanded data model (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrdersRequest($channelId = null, $companyId = null, $customerId = null, $done = null, $canceled = null, $statusId = null, $from = null, $to = null, $tracking = null, $page = 1, $perPage = 10, $expanded = false)
    {
        if ($perPage !== null && $perPage > 250) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling SystemOrdersApi.getOrders, must be smaller than or equal to 250.');
        }
        if ($perPage !== null && $perPage < 10) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling SystemOrdersApi.getOrders, must be bigger than or equal to 10.');
        }


        $resourcePath = '/System/Orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($channelId !== null) {
            if('form' === 'form' && is_array($channelId)) {
                foreach($channelId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['channel_id'] = $channelId;
            }
        }
        // query params
        if ($companyId !== null) {
            if('form' === 'form' && is_array($companyId)) {
                foreach($companyId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['company_id'] = $companyId;
            }
        }
        // query params
        if ($customerId !== null) {
            if('form' === 'form' && is_array($customerId)) {
                foreach($customerId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_id'] = $customerId;
            }
        }
        // query params
        if ($done !== null) {
            if('form' === 'form' && is_array($done)) {
                foreach($done as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['done'] = $done;
            }
        }
        // query params
        if ($canceled !== null) {
            if('form' === 'form' && is_array($canceled)) {
                foreach($canceled as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['canceled'] = $canceled;
            }
        }
        // query params
        if ($statusId !== null) {
            if('form' === 'form' && is_array($statusId)) {
                foreach($statusId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['status_id'] = $statusId;
            }
        }
        // query params
        if ($from !== null) {
            if('form' === 'form' && is_array($from)) {
                foreach($from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['from'] = $from;
            }
        }
        // query params
        if ($to !== null) {
            if('form' === 'form' && is_array($to)) {
                foreach($to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['to'] = $to;
            }
        }
        // query params
        if ($tracking !== null) {
            if('form' === 'form' && is_array($tracking)) {
                foreach($tracking as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tracking'] = $tracking;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($perPage !== null) {
            if('form' === 'form' && is_array($perPage)) {
                foreach($perPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $perPage;
            }
        }
        // query params
        if ($expanded !== null) {
            if('form' === 'form' && is_array($expanded)) {
                foreach($expanded as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['expanded'] = $expanded;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrdersStauses
     *
     * Get All Oreder Statuses
     *
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Orders per page (min:10 max:250) (optional, default to 10)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\OrderStatusesModel
     */
    public function getOrdersStauses($page = 1, $perPage = 10)
    {
        list($response) = $this->getOrdersStausesWithHttpInfo($page, $perPage);
        return $response;
    }

    /**
     * Operation getOrdersStausesWithHttpInfo
     *
     * Get All Oreder Statuses
     *
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Orders per page (min:10 max:250) (optional, default to 10)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\OrderStatusesModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrdersStausesWithHttpInfo($page = 1, $perPage = 10)
    {
        $request = $this->getOrdersStausesRequest($page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\OrderStatusesModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\OrderStatusesModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\OrderStatusesModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\OrderStatusesModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrdersStausesAsync
     *
     * Get All Oreder Statuses
     *
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Orders per page (min:10 max:250) (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrdersStausesAsync($page = 1, $perPage = 10)
    {
        return $this->getOrdersStausesAsyncWithHttpInfo($page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrdersStausesAsyncWithHttpInfo
     *
     * Get All Oreder Statuses
     *
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Orders per page (min:10 max:250) (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrdersStausesAsyncWithHttpInfo($page = 1, $perPage = 10)
    {
        $returnType = '\Retailys\Model\OrderStatusesModel';
        $request = $this->getOrdersStausesRequest($page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrdersStauses'
     *
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Orders per page (min:10 max:250) (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrdersStausesRequest($page = 1, $perPage = 10)
    {
        if ($perPage !== null && $perPage > 250) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling SystemOrdersApi.getOrdersStauses, must be smaller than or equal to 250.');
        }
        if ($perPage !== null && $perPage < 10) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling SystemOrdersApi.getOrdersStauses, must be bigger than or equal to 10.');
        }


        $resourcePath = '/System/Orders/Statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($perPage !== null) {
            if('form' === 'form' && is_array($perPage)) {
                foreach($perPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $perPage;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchOrderCancel
     *
     * Cancel order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\OrderModel|\Retailys\Model\ErrorModel
     */
    public function patchOrderCancel($orderId)
    {
        list($response) = $this->patchOrderCancelWithHttpInfo($orderId);
        return $response;
    }

    /**
     * Operation patchOrderCancelWithHttpInfo
     *
     * Cancel order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\OrderModel|\Retailys\Model\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchOrderCancelWithHttpInfo($orderId)
    {
        $request = $this->patchOrderCancelRequest($orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\OrderModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\OrderModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\OrderModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\OrderModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchOrderCancelAsync
     *
     * Cancel order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOrderCancelAsync($orderId)
    {
        return $this->patchOrderCancelAsyncWithHttpInfo($orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchOrderCancelAsyncWithHttpInfo
     *
     * Cancel order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOrderCancelAsyncWithHttpInfo($orderId)
    {
        $returnType = '\Retailys\Model\OrderModel';
        $request = $this->patchOrderCancelRequest($orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchOrderCancel'
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchOrderCancelRequest($orderId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling patchOrderCancel'
            );
        }

        $resourcePath = '/System/Orders/{order-id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchOrderDelivered
     *
     * Set flag delivered on order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\OrderModel|\Retailys\Model\ErrorModel|\Retailys\Model\ErrorModel|\Retailys\Model\ErrorModel
     */
    public function patchOrderDelivered($orderId)
    {
        list($response) = $this->patchOrderDeliveredWithHttpInfo($orderId);
        return $response;
    }

    /**
     * Operation patchOrderDeliveredWithHttpInfo
     *
     * Set flag delivered on order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\OrderModel|\Retailys\Model\ErrorModel|\Retailys\Model\ErrorModel|\Retailys\Model\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchOrderDeliveredWithHttpInfo($orderId)
    {
        $request = $this->patchOrderDeliveredRequest($orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\OrderModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\OrderModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\OrderModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\OrderModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchOrderDeliveredAsync
     *
     * Set flag delivered on order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOrderDeliveredAsync($orderId)
    {
        return $this->patchOrderDeliveredAsyncWithHttpInfo($orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchOrderDeliveredAsyncWithHttpInfo
     *
     * Set flag delivered on order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOrderDeliveredAsyncWithHttpInfo($orderId)
    {
        $returnType = '\Retailys\Model\OrderModel';
        $request = $this->patchOrderDeliveredRequest($orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchOrderDelivered'
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchOrderDeliveredRequest($orderId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling patchOrderDelivered'
            );
        }

        $resourcePath = '/System/Orders/{order-id}/delivered';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchOrderDone
     *
     * Finish order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\OrderModel|\Retailys\Model\ErrorModel
     */
    public function patchOrderDone($orderId)
    {
        list($response) = $this->patchOrderDoneWithHttpInfo($orderId);
        return $response;
    }

    /**
     * Operation patchOrderDoneWithHttpInfo
     *
     * Finish order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\OrderModel|\Retailys\Model\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchOrderDoneWithHttpInfo($orderId)
    {
        $request = $this->patchOrderDoneRequest($orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\OrderModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\OrderModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\OrderModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\OrderModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchOrderDoneAsync
     *
     * Finish order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOrderDoneAsync($orderId)
    {
        return $this->patchOrderDoneAsyncWithHttpInfo($orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchOrderDoneAsyncWithHttpInfo
     *
     * Finish order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOrderDoneAsyncWithHttpInfo($orderId)
    {
        $returnType = '\Retailys\Model\OrderModel';
        $request = $this->patchOrderDoneRequest($orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchOrderDone'
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchOrderDoneRequest($orderId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling patchOrderDone'
            );
        }

        $resourcePath = '/System/Orders/{order-id}/done';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchOrderPaid
     *
     * Paid order by ID
     *
     * @param  \Retailys\Model\OrderPaidPatchRequest $orderPaidPatchRequest Update Order status (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\OrderModel
     */
    public function patchOrderPaid($orderPaidPatchRequest, $orderId)
    {
        list($response) = $this->patchOrderPaidWithHttpInfo($orderPaidPatchRequest, $orderId);
        return $response;
    }

    /**
     * Operation patchOrderPaidWithHttpInfo
     *
     * Paid order by ID
     *
     * @param  \Retailys\Model\OrderPaidPatchRequest $orderPaidPatchRequest Update Order status (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\OrderModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchOrderPaidWithHttpInfo($orderPaidPatchRequest, $orderId)
    {
        $request = $this->patchOrderPaidRequest($orderPaidPatchRequest, $orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\OrderModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\OrderModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\OrderModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\OrderModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchOrderPaidAsync
     *
     * Paid order by ID
     *
     * @param  \Retailys\Model\OrderPaidPatchRequest $orderPaidPatchRequest Update Order status (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOrderPaidAsync($orderPaidPatchRequest, $orderId)
    {
        return $this->patchOrderPaidAsyncWithHttpInfo($orderPaidPatchRequest, $orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchOrderPaidAsyncWithHttpInfo
     *
     * Paid order by ID
     *
     * @param  \Retailys\Model\OrderPaidPatchRequest $orderPaidPatchRequest Update Order status (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOrderPaidAsyncWithHttpInfo($orderPaidPatchRequest, $orderId)
    {
        $returnType = '\Retailys\Model\OrderModel';
        $request = $this->patchOrderPaidRequest($orderPaidPatchRequest, $orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchOrderPaid'
     *
     * @param  \Retailys\Model\OrderPaidPatchRequest $orderPaidPatchRequest Update Order status (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchOrderPaidRequest($orderPaidPatchRequest, $orderId)
    {
        // verify the required parameter 'orderPaidPatchRequest' is set
        if ($orderPaidPatchRequest === null || (is_array($orderPaidPatchRequest) && count($orderPaidPatchRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderPaidPatchRequest when calling patchOrderPaid'
            );
        }
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling patchOrderPaid'
            );
        }

        $resourcePath = '/System/Orders/{order-id}/paid';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($orderPaidPatchRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($orderPaidPatchRequest));
            } else {
                $httpBody = $orderPaidPatchRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchOrderSent
     *
     * Set flag sent on order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\OrderModel|\Retailys\Model\ErrorModel|\Retailys\Model\ErrorModel|\Retailys\Model\ErrorModel
     */
    public function patchOrderSent($orderId)
    {
        list($response) = $this->patchOrderSentWithHttpInfo($orderId);
        return $response;
    }

    /**
     * Operation patchOrderSentWithHttpInfo
     *
     * Set flag sent on order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\OrderModel|\Retailys\Model\ErrorModel|\Retailys\Model\ErrorModel|\Retailys\Model\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchOrderSentWithHttpInfo($orderId)
    {
        $request = $this->patchOrderSentRequest($orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\OrderModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\OrderModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\OrderModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\OrderModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchOrderSentAsync
     *
     * Set flag sent on order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOrderSentAsync($orderId)
    {
        return $this->patchOrderSentAsyncWithHttpInfo($orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchOrderSentAsyncWithHttpInfo
     *
     * Set flag sent on order by ID
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOrderSentAsyncWithHttpInfo($orderId)
    {
        $returnType = '\Retailys\Model\OrderModel';
        $request = $this->patchOrderSentRequest($orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchOrderSent'
     *
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchOrderSentRequest($orderId)
    {
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling patchOrderSent'
            );
        }

        $resourcePath = '/System/Orders/{order-id}/sent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchOrderStatus
     *
     * Finish order by ID
     *
     * @param  \Retailys\Model\OrderStatusPatchRequest $orderStatusPatchRequest Update Order status (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\OrderModel|\Retailys\Model\ErrorModel|\Retailys\Model\ErrorModel
     */
    public function patchOrderStatus($orderStatusPatchRequest, $orderId)
    {
        list($response) = $this->patchOrderStatusWithHttpInfo($orderStatusPatchRequest, $orderId);
        return $response;
    }

    /**
     * Operation patchOrderStatusWithHttpInfo
     *
     * Finish order by ID
     *
     * @param  \Retailys\Model\OrderStatusPatchRequest $orderStatusPatchRequest Update Order status (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\OrderModel|\Retailys\Model\ErrorModel|\Retailys\Model\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchOrderStatusWithHttpInfo($orderStatusPatchRequest, $orderId)
    {
        $request = $this->patchOrderStatusRequest($orderStatusPatchRequest, $orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\OrderModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\OrderModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\OrderModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\OrderModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchOrderStatusAsync
     *
     * Finish order by ID
     *
     * @param  \Retailys\Model\OrderStatusPatchRequest $orderStatusPatchRequest Update Order status (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOrderStatusAsync($orderStatusPatchRequest, $orderId)
    {
        return $this->patchOrderStatusAsyncWithHttpInfo($orderStatusPatchRequest, $orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchOrderStatusAsyncWithHttpInfo
     *
     * Finish order by ID
     *
     * @param  \Retailys\Model\OrderStatusPatchRequest $orderStatusPatchRequest Update Order status (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchOrderStatusAsyncWithHttpInfo($orderStatusPatchRequest, $orderId)
    {
        $returnType = '\Retailys\Model\OrderModel';
        $request = $this->patchOrderStatusRequest($orderStatusPatchRequest, $orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchOrderStatus'
     *
     * @param  \Retailys\Model\OrderStatusPatchRequest $orderStatusPatchRequest Update Order status (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchOrderStatusRequest($orderStatusPatchRequest, $orderId)
    {
        // verify the required parameter 'orderStatusPatchRequest' is set
        if ($orderStatusPatchRequest === null || (is_array($orderStatusPatchRequest) && count($orderStatusPatchRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderStatusPatchRequest when calling patchOrderStatus'
            );
        }
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling patchOrderStatus'
            );
        }

        $resourcePath = '/System/Orders/{order-id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($orderStatusPatchRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($orderStatusPatchRequest));
            } else {
                $httpBody = $orderStatusPatchRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrder
     *
     * Create new Order in system
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\IdModel
     */
    public function postOrder($orderPostRequest)
    {
        list($response) = $this->postOrderWithHttpInfo($orderPostRequest);
        return $response;
    }

    /**
     * Operation postOrderWithHttpInfo
     *
     * Create new Order in system
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\IdModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrderWithHttpInfo($orderPostRequest)
    {
        $request = $this->postOrderRequest($orderPostRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Retailys\Model\IdModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\IdModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\IdModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\IdModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrderAsync
     *
     * Create new Order in system
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderAsync($orderPostRequest)
    {
        return $this->postOrderAsyncWithHttpInfo($orderPostRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrderAsyncWithHttpInfo
     *
     * Create new Order in system
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderAsyncWithHttpInfo($orderPostRequest)
    {
        $returnType = '\Retailys\Model\IdModel';
        $request = $this->postOrderRequest($orderPostRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrder'
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postOrderRequest($orderPostRequest)
    {
        // verify the required parameter 'orderPostRequest' is set
        if ($orderPostRequest === null || (is_array($orderPostRequest) && count($orderPostRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderPostRequest when calling postOrder'
            );
        }

        $resourcePath = '/System/Orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($orderPostRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($orderPostRequest));
            } else {
                $httpBody = $orderPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrderHistory
     *
     * Create new record in Order History by ID
     *
     * @param  \Retailys\Model\HistoryPostRequest $historyPostRequest Create History record in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\IdModel
     */
    public function postOrderHistory($historyPostRequest, $orderId)
    {
        list($response) = $this->postOrderHistoryWithHttpInfo($historyPostRequest, $orderId);
        return $response;
    }

    /**
     * Operation postOrderHistoryWithHttpInfo
     *
     * Create new record in Order History by ID
     *
     * @param  \Retailys\Model\HistoryPostRequest $historyPostRequest Create History record in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\IdModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrderHistoryWithHttpInfo($historyPostRequest, $orderId)
    {
        $request = $this->postOrderHistoryRequest($historyPostRequest, $orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Retailys\Model\IdModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\IdModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\IdModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\IdModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrderHistoryAsync
     *
     * Create new record in Order History by ID
     *
     * @param  \Retailys\Model\HistoryPostRequest $historyPostRequest Create History record in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderHistoryAsync($historyPostRequest, $orderId)
    {
        return $this->postOrderHistoryAsyncWithHttpInfo($historyPostRequest, $orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrderHistoryAsyncWithHttpInfo
     *
     * Create new record in Order History by ID
     *
     * @param  \Retailys\Model\HistoryPostRequest $historyPostRequest Create History record in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderHistoryAsyncWithHttpInfo($historyPostRequest, $orderId)
    {
        $returnType = '\Retailys\Model\IdModel';
        $request = $this->postOrderHistoryRequest($historyPostRequest, $orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrderHistory'
     *
     * @param  \Retailys\Model\HistoryPostRequest $historyPostRequest Create History record in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postOrderHistoryRequest($historyPostRequest, $orderId)
    {
        // verify the required parameter 'historyPostRequest' is set
        if ($historyPostRequest === null || (is_array($historyPostRequest) && count($historyPostRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $historyPostRequest when calling postOrderHistory'
            );
        }
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling postOrderHistory'
            );
        }

        $resourcePath = '/System/Orders/{order-id}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($historyPostRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($historyPostRequest));
            } else {
                $httpBody = $historyPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrderItem
     *
     * Create new item in Order by ID
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\IdModel|\Retailys\Model\ErrorModel
     */
    public function postOrderItem($orderPostRequest, $orderId)
    {
        list($response) = $this->postOrderItemWithHttpInfo($orderPostRequest, $orderId);
        return $response;
    }

    /**
     * Operation postOrderItemWithHttpInfo
     *
     * Create new item in Order by ID
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\IdModel|\Retailys\Model\ErrorModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrderItemWithHttpInfo($orderPostRequest, $orderId)
    {
        $request = $this->postOrderItemRequest($orderPostRequest, $orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Retailys\Model\IdModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\IdModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Retailys\Model\ErrorModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ErrorModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\IdModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\IdModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ErrorModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrderItemAsync
     *
     * Create new item in Order by ID
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderItemAsync($orderPostRequest, $orderId)
    {
        return $this->postOrderItemAsyncWithHttpInfo($orderPostRequest, $orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrderItemAsyncWithHttpInfo
     *
     * Create new item in Order by ID
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderItemAsyncWithHttpInfo($orderPostRequest, $orderId)
    {
        $returnType = '\Retailys\Model\IdModel';
        $request = $this->postOrderItemRequest($orderPostRequest, $orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrderItem'
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postOrderItemRequest($orderPostRequest, $orderId)
    {
        // verify the required parameter 'orderPostRequest' is set
        if ($orderPostRequest === null || (is_array($orderPostRequest) && count($orderPostRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderPostRequest when calling postOrderItem'
            );
        }
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling postOrderItem'
            );
        }

        $resourcePath = '/System/Orders/{order-id}/item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($orderPostRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($orderPostRequest));
            } else {
                $httpBody = $orderPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrderTracking
     *
     * Add tracking number in Order by ID
     *
     * @param  \Retailys\Model\TrackingPostRequest $trackingPostRequest Create Tracking Number in Order (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\IdModel
     */
    public function postOrderTracking($trackingPostRequest, $orderId)
    {
        list($response) = $this->postOrderTrackingWithHttpInfo($trackingPostRequest, $orderId);
        return $response;
    }

    /**
     * Operation postOrderTrackingWithHttpInfo
     *
     * Add tracking number in Order by ID
     *
     * @param  \Retailys\Model\TrackingPostRequest $trackingPostRequest Create Tracking Number in Order (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\IdModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrderTrackingWithHttpInfo($trackingPostRequest, $orderId)
    {
        $request = $this->postOrderTrackingRequest($trackingPostRequest, $orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Retailys\Model\IdModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\IdModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\IdModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\IdModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrderTrackingAsync
     *
     * Add tracking number in Order by ID
     *
     * @param  \Retailys\Model\TrackingPostRequest $trackingPostRequest Create Tracking Number in Order (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderTrackingAsync($trackingPostRequest, $orderId)
    {
        return $this->postOrderTrackingAsyncWithHttpInfo($trackingPostRequest, $orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrderTrackingAsyncWithHttpInfo
     *
     * Add tracking number in Order by ID
     *
     * @param  \Retailys\Model\TrackingPostRequest $trackingPostRequest Create Tracking Number in Order (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderTrackingAsyncWithHttpInfo($trackingPostRequest, $orderId)
    {
        $returnType = '\Retailys\Model\IdModel';
        $request = $this->postOrderTrackingRequest($trackingPostRequest, $orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrderTracking'
     *
     * @param  \Retailys\Model\TrackingPostRequest $trackingPostRequest Create Tracking Number in Order (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postOrderTrackingRequest($trackingPostRequest, $orderId)
    {
        // verify the required parameter 'trackingPostRequest' is set
        if ($trackingPostRequest === null || (is_array($trackingPostRequest) && count($trackingPostRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trackingPostRequest when calling postOrderTracking'
            );
        }
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling postOrderTracking'
            );
        }

        $resourcePath = '/System/Orders/{order-id}/tracking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($trackingPostRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($trackingPostRequest));
            } else {
                $httpBody = $trackingPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOrder
     *
     * Update Order system (only delivery address)
     *
     * @param  \Retailys\Model\OrderPutRequest $orderPutRequest Update Order in Retailys System (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\IdModel
     */
    public function putOrder($orderPutRequest)
    {
        list($response) = $this->putOrderWithHttpInfo($orderPutRequest);
        return $response;
    }

    /**
     * Operation putOrderWithHttpInfo
     *
     * Update Order system (only delivery address)
     *
     * @param  \Retailys\Model\OrderPutRequest $orderPutRequest Update Order in Retailys System (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\IdModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOrderWithHttpInfo($orderPutRequest)
    {
        $request = $this->putOrderRequest($orderPutRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\IdModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\IdModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\IdModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\IdModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOrderAsync
     *
     * Update Order system (only delivery address)
     *
     * @param  \Retailys\Model\OrderPutRequest $orderPutRequest Update Order in Retailys System (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrderAsync($orderPutRequest)
    {
        return $this->putOrderAsyncWithHttpInfo($orderPutRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOrderAsyncWithHttpInfo
     *
     * Update Order system (only delivery address)
     *
     * @param  \Retailys\Model\OrderPutRequest $orderPutRequest Update Order in Retailys System (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrderAsyncWithHttpInfo($orderPutRequest)
    {
        $returnType = '\Retailys\Model\IdModel';
        $request = $this->putOrderRequest($orderPutRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOrder'
     *
     * @param  \Retailys\Model\OrderPutRequest $orderPutRequest Update Order in Retailys System (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putOrderRequest($orderPutRequest)
    {
        // verify the required parameter 'orderPutRequest' is set
        if ($orderPutRequest === null || (is_array($orderPutRequest) && count($orderPutRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderPutRequest when calling putOrder'
            );
        }

        $resourcePath = '/System/Orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($orderPutRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($orderPutRequest));
            } else {
                $httpBody = $orderPutRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOrderItem
     *
     * Update item in Order by ID
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\IdModel
     */
    public function putOrderItem($orderPostRequest, $orderId)
    {
        list($response) = $this->putOrderItemWithHttpInfo($orderPostRequest, $orderId);
        return $response;
    }

    /**
     * Operation putOrderItemWithHttpInfo
     *
     * Update item in Order by ID
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\IdModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOrderItemWithHttpInfo($orderPostRequest, $orderId)
    {
        $request = $this->putOrderItemRequest($orderPostRequest, $orderId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Retailys\Model\IdModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\IdModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\IdModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\IdModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOrderItemAsync
     *
     * Update item in Order by ID
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrderItemAsync($orderPostRequest, $orderId)
    {
        return $this->putOrderItemAsyncWithHttpInfo($orderPostRequest, $orderId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOrderItemAsyncWithHttpInfo
     *
     * Update item in Order by ID
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrderItemAsyncWithHttpInfo($orderPostRequest, $orderId)
    {
        $returnType = '\Retailys\Model\IdModel';
        $request = $this->putOrderItemRequest($orderPostRequest, $orderId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOrderItem'
     *
     * @param  \Retailys\Model\OrderPostRequest $orderPostRequest Create Order in Retailys System (required)
     * @param  int $orderId Order ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putOrderItemRequest($orderPostRequest, $orderId)
    {
        // verify the required parameter 'orderPostRequest' is set
        if ($orderPostRequest === null || (is_array($orderPostRequest) && count($orderPostRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderPostRequest when calling putOrderItem'
            );
        }
        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling putOrderItem'
            );
        }

        $resourcePath = '/System/Orders/{order-id}/item';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'order-id' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($orderPostRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($orderPostRequest));
            } else {
                $httpBody = $orderPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
