<?php
/**
 * SystemContentArticlesApi
 * PHP version 7.3
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Retailys API
 *
 * Communication API restful e-commerce system Retailys. Get access in system at [https://www.retailys.com](https://www.retailys.com)<h1>Introduction</h1>**Retailys API** allows to create an amazing ecosystem of e-commerce services and help to develop robust webshops and other e-commerce solutions. Thanks to many built-in omnichannel and multichannel principles, every developer has possibility tu use **Retailys API** for creating vast global e-commerce applications easily and effectively.
 *
 * The version of the OpenAPI document: 1.1.02
 * Contact: helpdesk@retailys.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Retailys\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Retailys\ApiException;
use Retailys\Configuration;
use Retailys\HeaderSelector;
use Retailys\ObjectSerializer;

/**
 * SystemContentArticlesApi Class Doc Comment
 *
 * @category Class
 * @package  Retailys
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SystemContentArticlesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getArticle
     *
     * Find article by ID
     *
     * @param  int $id Article ID (required)
     * @param  int $channelId Channel ID (optional)
     * @param  bool $expanded Data model expanded (optional, default to false)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\ArticleModel
     */
    public function getArticle($id, $channelId = null, $expanded = false)
    {
        list($response) = $this->getArticleWithHttpInfo($id, $channelId, $expanded);
        return $response;
    }

    /**
     * Operation getArticleWithHttpInfo
     *
     * Find article by ID
     *
     * @param  int $id Article ID (required)
     * @param  int $channelId Channel ID (optional)
     * @param  bool $expanded Data model expanded (optional, default to false)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\ArticleModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getArticleWithHttpInfo($id, $channelId = null, $expanded = false)
    {
        $request = $this->getArticleRequest($id, $channelId, $expanded);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\ArticleModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ArticleModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\ArticleModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ArticleModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getArticleAsync
     *
     * Find article by ID
     *
     * @param  int $id Article ID (required)
     * @param  int $channelId Channel ID (optional)
     * @param  bool $expanded Data model expanded (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticleAsync($id, $channelId = null, $expanded = false)
    {
        return $this->getArticleAsyncWithHttpInfo($id, $channelId, $expanded)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getArticleAsyncWithHttpInfo
     *
     * Find article by ID
     *
     * @param  int $id Article ID (required)
     * @param  int $channelId Channel ID (optional)
     * @param  bool $expanded Data model expanded (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticleAsyncWithHttpInfo($id, $channelId = null, $expanded = false)
    {
        $returnType = '\Retailys\Model\ArticleModel';
        $request = $this->getArticleRequest($id, $channelId, $expanded);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getArticle'
     *
     * @param  int $id Article ID (required)
     * @param  int $channelId Channel ID (optional)
     * @param  bool $expanded Data model expanded (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getArticleRequest($id, $channelId = null, $expanded = false)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getArticle'
            );
        }

        $resourcePath = '/System/Content/Articles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($channelId !== null) {
            if('form' === 'form' && is_array($channelId)) {
                foreach($channelId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['channel_id'] = $channelId;
            }
        }
        // query params
        if ($expanded !== null) {
            if('form' === 'form' && is_array($expanded)) {
                foreach($expanded as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['expanded'] = $expanded;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getArticles
     *
     * Find articles by params
     *
     * @param  int $channelId Channel ID (optional)
     * @param  int $familyId Family ID (optional)
     * @param  string $ean EAN code (optional)
     * @param  string $asin ASIN code (optional)
     * @param  string $isbn ISBN code (optional)
     * @param  string $internalCatalogId Internal catalog ID (optional)
     * @param  string $manufacturerCatalogId Manufacture catalog ID (optional)
     * @param  int $parentId Article parent ID (optional)
     * @param  string $note note (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Articles per page (optional, default to 10)
     * @param  bool $expanded Data model expanded (optional, default to false)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\ArticlesModel
     */
    public function getArticles($channelId = null, $familyId = null, $ean = null, $asin = null, $isbn = null, $internalCatalogId = null, $manufacturerCatalogId = null, $parentId = null, $note = null, $page = 1, $perPage = 10, $expanded = false)
    {
        list($response) = $this->getArticlesWithHttpInfo($channelId, $familyId, $ean, $asin, $isbn, $internalCatalogId, $manufacturerCatalogId, $parentId, $note, $page, $perPage, $expanded);
        return $response;
    }

    /**
     * Operation getArticlesWithHttpInfo
     *
     * Find articles by params
     *
     * @param  int $channelId Channel ID (optional)
     * @param  int $familyId Family ID (optional)
     * @param  string $ean EAN code (optional)
     * @param  string $asin ASIN code (optional)
     * @param  string $isbn ISBN code (optional)
     * @param  string $internalCatalogId Internal catalog ID (optional)
     * @param  string $manufacturerCatalogId Manufacture catalog ID (optional)
     * @param  int $parentId Article parent ID (optional)
     * @param  string $note note (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Articles per page (optional, default to 10)
     * @param  bool $expanded Data model expanded (optional, default to false)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\ArticlesModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getArticlesWithHttpInfo($channelId = null, $familyId = null, $ean = null, $asin = null, $isbn = null, $internalCatalogId = null, $manufacturerCatalogId = null, $parentId = null, $note = null, $page = 1, $perPage = 10, $expanded = false)
    {
        $request = $this->getArticlesRequest($channelId, $familyId, $ean, $asin, $isbn, $internalCatalogId, $manufacturerCatalogId, $parentId, $note, $page, $perPage, $expanded);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Retailys\Model\ArticlesModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\ArticlesModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\ArticlesModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\ArticlesModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getArticlesAsync
     *
     * Find articles by params
     *
     * @param  int $channelId Channel ID (optional)
     * @param  int $familyId Family ID (optional)
     * @param  string $ean EAN code (optional)
     * @param  string $asin ASIN code (optional)
     * @param  string $isbn ISBN code (optional)
     * @param  string $internalCatalogId Internal catalog ID (optional)
     * @param  string $manufacturerCatalogId Manufacture catalog ID (optional)
     * @param  int $parentId Article parent ID (optional)
     * @param  string $note note (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Articles per page (optional, default to 10)
     * @param  bool $expanded Data model expanded (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticlesAsync($channelId = null, $familyId = null, $ean = null, $asin = null, $isbn = null, $internalCatalogId = null, $manufacturerCatalogId = null, $parentId = null, $note = null, $page = 1, $perPage = 10, $expanded = false)
    {
        return $this->getArticlesAsyncWithHttpInfo($channelId, $familyId, $ean, $asin, $isbn, $internalCatalogId, $manufacturerCatalogId, $parentId, $note, $page, $perPage, $expanded)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getArticlesAsyncWithHttpInfo
     *
     * Find articles by params
     *
     * @param  int $channelId Channel ID (optional)
     * @param  int $familyId Family ID (optional)
     * @param  string $ean EAN code (optional)
     * @param  string $asin ASIN code (optional)
     * @param  string $isbn ISBN code (optional)
     * @param  string $internalCatalogId Internal catalog ID (optional)
     * @param  string $manufacturerCatalogId Manufacture catalog ID (optional)
     * @param  int $parentId Article parent ID (optional)
     * @param  string $note note (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Articles per page (optional, default to 10)
     * @param  bool $expanded Data model expanded (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticlesAsyncWithHttpInfo($channelId = null, $familyId = null, $ean = null, $asin = null, $isbn = null, $internalCatalogId = null, $manufacturerCatalogId = null, $parentId = null, $note = null, $page = 1, $perPage = 10, $expanded = false)
    {
        $returnType = '\Retailys\Model\ArticlesModel';
        $request = $this->getArticlesRequest($channelId, $familyId, $ean, $asin, $isbn, $internalCatalogId, $manufacturerCatalogId, $parentId, $note, $page, $perPage, $expanded);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getArticles'
     *
     * @param  int $channelId Channel ID (optional)
     * @param  int $familyId Family ID (optional)
     * @param  string $ean EAN code (optional)
     * @param  string $asin ASIN code (optional)
     * @param  string $isbn ISBN code (optional)
     * @param  string $internalCatalogId Internal catalog ID (optional)
     * @param  string $manufacturerCatalogId Manufacture catalog ID (optional)
     * @param  int $parentId Article parent ID (optional)
     * @param  string $note note (optional)
     * @param  int $page Page (optional, default to 1)
     * @param  int $perPage Articles per page (optional, default to 10)
     * @param  bool $expanded Data model expanded (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getArticlesRequest($channelId = null, $familyId = null, $ean = null, $asin = null, $isbn = null, $internalCatalogId = null, $manufacturerCatalogId = null, $parentId = null, $note = null, $page = 1, $perPage = 10, $expanded = false)
    {
        if ($perPage !== null && $perPage > 250) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling SystemContentArticlesApi.getArticles, must be smaller than or equal to 250.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling SystemContentArticlesApi.getArticles, must be bigger than or equal to 1.');
        }


        $resourcePath = '/System/Content/Articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($channelId !== null) {
            if('form' === 'form' && is_array($channelId)) {
                foreach($channelId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['channel_id'] = $channelId;
            }
        }
        // query params
        if ($familyId !== null) {
            if('form' === 'form' && is_array($familyId)) {
                foreach($familyId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['family_id'] = $familyId;
            }
        }
        // query params
        if ($ean !== null) {
            if('form' === 'form' && is_array($ean)) {
                foreach($ean as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ean'] = $ean;
            }
        }
        // query params
        if ($asin !== null) {
            if('form' === 'form' && is_array($asin)) {
                foreach($asin as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['asin'] = $asin;
            }
        }
        // query params
        if ($isbn !== null) {
            if('form' === 'form' && is_array($isbn)) {
                foreach($isbn as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['isbn'] = $isbn;
            }
        }
        // query params
        if ($internalCatalogId !== null) {
            if('form' === 'form' && is_array($internalCatalogId)) {
                foreach($internalCatalogId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['internal_catalog_id'] = $internalCatalogId;
            }
        }
        // query params
        if ($manufacturerCatalogId !== null) {
            if('form' === 'form' && is_array($manufacturerCatalogId)) {
                foreach($manufacturerCatalogId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['manufacturer_catalog_id'] = $manufacturerCatalogId;
            }
        }
        // query params
        if ($parentId !== null) {
            if('form' === 'form' && is_array($parentId)) {
                foreach($parentId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['parent_id'] = $parentId;
            }
        }
        // query params
        if ($note !== null) {
            if('form' === 'form' && is_array($note)) {
                foreach($note as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['note'] = $note;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($perPage !== null) {
            if('form' === 'form' && is_array($perPage)) {
                foreach($perPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $perPage;
            }
        }
        // query params
        if ($expanded !== null) {
            if('form' === 'form' && is_array($expanded)) {
                foreach($expanded as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['expanded'] = $expanded;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postArticle
     *
     * Create new article
     *
     * @param  \Retailys\Model\ArticlePostRequest $articlePostRequest Article object that needs to be added to the retailys (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\IdMultidataModel
     */
    public function postArticle($articlePostRequest)
    {
        list($response) = $this->postArticleWithHttpInfo($articlePostRequest);
        return $response;
    }

    /**
     * Operation postArticleWithHttpInfo
     *
     * Create new article
     *
     * @param  \Retailys\Model\ArticlePostRequest $articlePostRequest Article object that needs to be added to the retailys (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\IdMultidataModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function postArticleWithHttpInfo($articlePostRequest)
    {
        $request = $this->postArticleRequest($articlePostRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Retailys\Model\IdMultidataModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\IdMultidataModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\IdMultidataModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\IdMultidataModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postArticleAsync
     *
     * Create new article
     *
     * @param  \Retailys\Model\ArticlePostRequest $articlePostRequest Article object that needs to be added to the retailys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postArticleAsync($articlePostRequest)
    {
        return $this->postArticleAsyncWithHttpInfo($articlePostRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postArticleAsyncWithHttpInfo
     *
     * Create new article
     *
     * @param  \Retailys\Model\ArticlePostRequest $articlePostRequest Article object that needs to be added to the retailys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postArticleAsyncWithHttpInfo($articlePostRequest)
    {
        $returnType = '\Retailys\Model\IdMultidataModel';
        $request = $this->postArticleRequest($articlePostRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postArticle'
     *
     * @param  \Retailys\Model\ArticlePostRequest $articlePostRequest Article object that needs to be added to the retailys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postArticleRequest($articlePostRequest)
    {
        // verify the required parameter 'articlePostRequest' is set
        if ($articlePostRequest === null || (is_array($articlePostRequest) && count($articlePostRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $articlePostRequest when calling postArticle'
            );
        }

        $resourcePath = '/System/Content/Articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($articlePostRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($articlePostRequest));
            } else {
                $httpBody = $articlePostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postArticleAddVariant
     *
     * Add Variant for Article by ID on Channel by ID
     *
     * @param  \Retailys\Model\ArticleAddVariantPostRequest $articleAddVariantPostRequest Add variant for Article (required)
     * @param  int $id Article ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\IdModel
     */
    public function postArticleAddVariant($articleAddVariantPostRequest, $id)
    {
        list($response) = $this->postArticleAddVariantWithHttpInfo($articleAddVariantPostRequest, $id);
        return $response;
    }

    /**
     * Operation postArticleAddVariantWithHttpInfo
     *
     * Add Variant for Article by ID on Channel by ID
     *
     * @param  \Retailys\Model\ArticleAddVariantPostRequest $articleAddVariantPostRequest Add variant for Article (required)
     * @param  int $id Article ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\IdModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function postArticleAddVariantWithHttpInfo($articleAddVariantPostRequest, $id)
    {
        $request = $this->postArticleAddVariantRequest($articleAddVariantPostRequest, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Retailys\Model\IdModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\IdModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\IdModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\IdModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postArticleAddVariantAsync
     *
     * Add Variant for Article by ID on Channel by ID
     *
     * @param  \Retailys\Model\ArticleAddVariantPostRequest $articleAddVariantPostRequest Add variant for Article (required)
     * @param  int $id Article ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postArticleAddVariantAsync($articleAddVariantPostRequest, $id)
    {
        return $this->postArticleAddVariantAsyncWithHttpInfo($articleAddVariantPostRequest, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postArticleAddVariantAsyncWithHttpInfo
     *
     * Add Variant for Article by ID on Channel by ID
     *
     * @param  \Retailys\Model\ArticleAddVariantPostRequest $articleAddVariantPostRequest Add variant for Article (required)
     * @param  int $id Article ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postArticleAddVariantAsyncWithHttpInfo($articleAddVariantPostRequest, $id)
    {
        $returnType = '\Retailys\Model\IdModel';
        $request = $this->postArticleAddVariantRequest($articleAddVariantPostRequest, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postArticleAddVariant'
     *
     * @param  \Retailys\Model\ArticleAddVariantPostRequest $articleAddVariantPostRequest Add variant for Article (required)
     * @param  int $id Article ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postArticleAddVariantRequest($articleAddVariantPostRequest, $id)
    {
        // verify the required parameter 'articleAddVariantPostRequest' is set
        if ($articleAddVariantPostRequest === null || (is_array($articleAddVariantPostRequest) && count($articleAddVariantPostRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $articleAddVariantPostRequest when calling postArticleAddVariant'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postArticleAddVariant'
            );
        }

        $resourcePath = '/System/Content/Articles/{id}/variants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($articleAddVariantPostRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($articleAddVariantPostRequest));
            } else {
                $httpBody = $articleAddVariantPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postArticleImages
     *
     * Add Images for Article by ID
     *
     * @param  \Retailys\Model\ArticleImagesPostRequest $articleImagesPostRequest Add image for Article (required)
     * @param  int $id Article ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Retailys\Model\IdModel
     */
    public function postArticleImages($articleImagesPostRequest, $id)
    {
        list($response) = $this->postArticleImagesWithHttpInfo($articleImagesPostRequest, $id);
        return $response;
    }

    /**
     * Operation postArticleImagesWithHttpInfo
     *
     * Add Images for Article by ID
     *
     * @param  \Retailys\Model\ArticleImagesPostRequest $articleImagesPostRequest Add image for Article (required)
     * @param  int $id Article ID (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Retailys\Model\IdModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function postArticleImagesWithHttpInfo($articleImagesPostRequest, $id)
    {
        $request = $this->postArticleImagesRequest($articleImagesPostRequest, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\Retailys\Model\IdModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Retailys\Model\IdModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Retailys\Model\IdModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Retailys\Model\IdModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postArticleImagesAsync
     *
     * Add Images for Article by ID
     *
     * @param  \Retailys\Model\ArticleImagesPostRequest $articleImagesPostRequest Add image for Article (required)
     * @param  int $id Article ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postArticleImagesAsync($articleImagesPostRequest, $id)
    {
        return $this->postArticleImagesAsyncWithHttpInfo($articleImagesPostRequest, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postArticleImagesAsyncWithHttpInfo
     *
     * Add Images for Article by ID
     *
     * @param  \Retailys\Model\ArticleImagesPostRequest $articleImagesPostRequest Add image for Article (required)
     * @param  int $id Article ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postArticleImagesAsyncWithHttpInfo($articleImagesPostRequest, $id)
    {
        $returnType = '\Retailys\Model\IdModel';
        $request = $this->postArticleImagesRequest($articleImagesPostRequest, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postArticleImages'
     *
     * @param  \Retailys\Model\ArticleImagesPostRequest $articleImagesPostRequest Add image for Article (required)
     * @param  int $id Article ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postArticleImagesRequest($articleImagesPostRequest, $id)
    {
        // verify the required parameter 'articleImagesPostRequest' is set
        if ($articleImagesPostRequest === null || (is_array($articleImagesPostRequest) && count($articleImagesPostRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $articleImagesPostRequest when calling postArticleImages'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postArticleImages'
            );
        }

        $resourcePath = '/System/Content/Articles/{id}/images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($articleImagesPostRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($articleImagesPostRequest));
            } else {
                $httpBody = $articleImagesPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putArticle
     *
     * Update article
     *
     * @param  \Retailys\Model\ArticlePutRequest $articlePutRequest Article object that needs to be updated to the retailys (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putArticle($articlePutRequest)
    {
        $this->putArticleWithHttpInfo($articlePutRequest);
    }

    /**
     * Operation putArticleWithHttpInfo
     *
     * Update article
     *
     * @param  \Retailys\Model\ArticlePutRequest $articlePutRequest Article object that needs to be updated to the retailys (required)
     *
     * @throws \Retailys\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putArticleWithHttpInfo($articlePutRequest)
    {
        $request = $this->putArticleRequest($articlePutRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putArticleAsync
     *
     * Update article
     *
     * @param  \Retailys\Model\ArticlePutRequest $articlePutRequest Article object that needs to be updated to the retailys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putArticleAsync($articlePutRequest)
    {
        return $this->putArticleAsyncWithHttpInfo($articlePutRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putArticleAsyncWithHttpInfo
     *
     * Update article
     *
     * @param  \Retailys\Model\ArticlePutRequest $articlePutRequest Article object that needs to be updated to the retailys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putArticleAsyncWithHttpInfo($articlePutRequest)
    {
        $returnType = '';
        $request = $this->putArticleRequest($articlePutRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putArticle'
     *
     * @param  \Retailys\Model\ArticlePutRequest $articlePutRequest Article object that needs to be updated to the retailys (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putArticleRequest($articlePutRequest)
    {
        // verify the required parameter 'articlePutRequest' is set
        if ($articlePutRequest === null || (is_array($articlePutRequest) && count($articlePutRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $articlePutRequest when calling putArticle'
            );
        }

        $resourcePath = '/System/Content/Articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($articlePutRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($articlePutRequest));
            } else {
                $httpBody = $articlePutRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $headers['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
